public class TestEmbeddedLoginController {
    
    
	@AuraEnabled
    public Static String myLogin(String username, String password, String startUrl) {
       
        try{
            ApexPages.PageReference lgn = Site.login(username, password, startUrl);
            aura.redirect(lgn);
            return null;
        }
        catch (Exception ex) {
            return ex.getMessage();            
        }
    }
    
    @AuraEnabled
    public static String setExperienceId(String expId) {
        // Return null if there is no error, else it will return the error message 
        try {
            if (expId != null) {
                Site.setExperienceId(expId);
            }
            return null; 
        } catch (Exception ex) {
            return ex.getMessage();            
        }
    } 
    
    @AuraEnabled
    public static String getOrgId() {
        return UserInfo.getOrganizationId();
    }
    
    @AuraEnabled
    public static String getSiteURL() {
        return Site.getBaseUrl();
    }
    
    @AuraEnabled
    public static List<AuthProvider> getAuthProviders() {
        return [SELECT Id,DeveloperName,FriendlyName,ProviderType FROM AuthProvider];
    }
    
    @AuraEnabled
    public static String getSelfRegistrationUrl() {
        Auth.AuthConfiguration authConfig = getAuthConfig();
        if (authConfig.getSelfRegistrationEnabled()) {
            return authConfig.getSelfRegistrationUrl();
        }
        return null;
    }

    @AuraEnabled
    public static String getMyStartUrl() {
        return System.currentPageReference().getParameters().get('startURL');
    }
    
    @AuraEnabled
    public static String getForgotPasswordUrl() {
        Auth.AuthConfiguration authConfig = getAuthConfig();
        return authConfig.getForgotPasswordUrl();
    }

    
    
    @TestVisible
    private static Auth.AuthConfiguration getAuthConfig(){
        Id networkId = Network.getNetworkId();
        Auth.AuthConfiguration authConfig = new Auth.AuthConfiguration(networkId,'');
        return authConfig;
    }
}

